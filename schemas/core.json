{
  "openapi": "3.1.0",
  "info": {
    "title": "Color Mixer Core API",
    "description": "Core API 提供混色演算法與 WebSocket 進度推播",
    "version": "0.1.0"
  },
  "paths": {
    "/": {
      "get": {
        "tags": ["health"],
        "summary": "Ping",
        "description": "Simple health probe.",
        "operationId": "ping__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          }
        }
      }
    },
    "/status": {
      "get": {
        "tags": ["health"],
        "summary": "Status",
        "description": "Current runtime state of the mixer core.",
        "operationId": "status_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/color": {
      "get": {
        "tags": ["sensor"],
        "summary": "Read Color",
        "description": "Read RGB value from the color sensor (scaled 0 – 255).",
        "operationId": "read_color_color_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RGBColorArray"
                }
              }
            }
          }
        }
      }
    },
    "/mix": {
      "post": {
        "tags": ["mix"],
        "summary": "Mix",
        "description": "Start a color mixing session.",
        "operationId": "mix_mix_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MixRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/reset": {
      "post": {
        "tags": ["mix"],
        "summary": "Reset",
        "description": "Stop the current mixing session and reset state.",
        "operationId": "reset_reset_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "MessageResponse": {
        "properties": {
          "ok": {
            "type": "boolean",
            "title": "Ok",
            "description": "Indicates whether the call succeeded."
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Human‑readable message."
          }
        },
        "type": "object",
        "required": ["ok", "message"],
        "title": "MessageResponse",
        "description": "Standard OK/NG envelope without additional payload."
      },
      "MixRequest": {
        "properties": {
          "target": {
            "$ref": "#/components/schemas/RGBColorArray",
            "description": "Target RGB color to be mixed (scaled 0 – 255)."
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message",
            "description": "Optional message to pass to the algorithm (for logging, etc.)."
          }
        },
        "type": "object",
        "required": ["target"],
        "title": "MixRequest",
        "description": "Request to start a color mixing session."
      },
      "RGBColorArray": {
        "items": {
          "type": "integer",
          "maximum": 255,
          "minimum": 0
        },
        "type": "array",
        "maxItems": 3,
        "minItems": 3,
        "title": "RGBColorArray",
        "description": "RGB color after scaling (0 – 255)."
      },
      "State": {
        "type": "string",
        "enum": ["accepted", "idle", "running", "error"],
        "title": "State",
        "description": "Operational state of the mixer core."
      },
      "StatusResponse": {
        "properties": {
          "state": {
            "$ref": "#/components/schemas/State"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message",
            "description": "Detail message."
          }
        },
        "type": "object",
        "required": ["state"],
        "title": "StatusResponse",
        "description": "Current runtime status of the mixer core."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      }
    }
  }
}
